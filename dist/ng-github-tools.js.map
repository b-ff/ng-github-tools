{"version":3,"sources":["webpack:///webpack/bootstrap 6be30be087051448e778","webpack:///./src/module.js","webpack:///./src/services/ghAuth.js","webpack:///./src/services/ghBase64Service.js","webpack:///./src/services/ghBranches.js","webpack:///./src/services/ghContents.js","webpack:///./src/services/ghRepositories.js","webpack:///./src/services/ghRequest.js","webpack:///./src/services/ghUsers.js","webpack:///./src/ng-github-tools.js"],"names":["angular","module","constant","_api","_http","_isLogged","_currentLogin","_encodeAuthData","_encodedAuthData","ghAuthServiceClass","$http","$ghApiHost","$ghBase64Service","login","password","encode","authData","method","url","headers","then","logout","apiURL","data","isLoggedIn","toUpperCase","service","_keyStr","_utf8_encode","string","replace","utftext","n","length","c","charCodeAt","String","fromCharCode","_utf8_decode","i","c1","c2","c3","ghBase64ServiceClass","input","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","indexOf","_req","ghBranchesServiceClass","$ghRequestService","ownerName","repositoryName","getAsPossible","branchName","ghContentsServiceClass","username","getBasePath","path","ref","message","content","committer","author","branch","params","put","sha","delete","archive_format","ghRepositoriesServiceClass","orgName","repositoryData","sendAuthorized","organizationName","_auth","_getFullUrl","ghRequestServiceClass","$ghAuthService","sendAuthorizedRequest","sendAsPossible","ghUsersServiceClass","since"],"mappings":"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","file":"ng-github-tools.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6be30be087051448e778","angular\n    .module('ngGitHubTools', [])\n    .constant('$ghApiHost', 'https://api.github.com/');\n\n\n\n// WEBPACK FOOTER //\n// ./src/module.js","/**\n * Service for working with GitHub authorization API\n */\n\n(() => {\n\n    let _api;\n    let _http;\n    let _isLogged;\n    let _currentLogin;\n    let _encodeAuthData;\n    let _encodedAuthData;\n\n    class ghAuthServiceClass {\n        constructor($http, $ghApiHost, $ghBase64Service) {\n            _api = $ghApiHost;\n            _http = $http;\n\n            // set private function to encode auth data to base64 GitHub format\n            _encodeAuthData = (login, password) => $ghBase64Service.encode(`${login}:${password}`);\n        }\n\n        login(login, password) {\n            let authData = _encodeAuthData(login, password);\n\n            return _http({\n                method: 'GET',\n                url: _api,\n                headers: {\n                    'Authorization': 'Basic ' + authData\n                }\n            }).then(() => {\n                _isLogged = true;\n                _currentLogin = login;\n                _encodedAuthData = authData;\n            }, this.logout);\n        }\n\n        logout() {\n            _isLogged = false;\n            _currentLogin = null;\n            _encodeAuthData = '';\n        }\n\n        isLoggedIn() {\n            return _isLogged;\n        }\n\n        getCurrentLogin() {\n            return _currentLogin;\n        }\n\n        sendAuthorizedRequest(method, apiURL, data) {\n            if (!this.isLoggedIn()) return false;\n\n            return _http({\n                method: method.toUpperCase(),\n                url: _api + apiURL,\n                headers: {\n                    'Authorization': 'Basic ' + _encodedAuthData\n                },\n                data: data\n            });\n        }\n    }\n\n    angular.module('ngGitHubTools').service('$ghAuthService', ['$http', '$ghApiHost', '$ghBase64Service', ghAuthServiceClass]);\n\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/ghAuth.js","/**\n * Helping service for encoding data to base64 and decode it back\n */\n\n(() => {\n\n    const _keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    const _utf8_encode = (string) => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (var n = 0; n < string.length; n++) {\n\n            var c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            }\n            else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n            else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n\n        }\n\n        return utftext;\n    };\n\n    const _utf8_decode = (utftext) => {\n        let string = \"\";\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            }\n            else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            }\n            else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n                i += 3;\n            }\n\n        }\n\n        return string;\n    };\n\n    class ghBase64ServiceClass {\n        encode(input) {\n            let output = \"\";\n            let chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n            let i = 0;\n\n            input = _utf8_encode(input);\n\n            while (i < input.length) {\n\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +\n                    _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n\n            }\n\n            return output;\n        }\n\n        decode(input) {\n            let output = \"\";\n            let chr1, chr2, chr3;\n            let enc1, enc2, enc3, enc4;\n            let i = 0;\n\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n            while (i < input.length) {\n\n                enc1 = _keyStr.indexOf(input.charAt(i++));\n                enc2 = _keyStr.indexOf(input.charAt(i++));\n                enc3 = _keyStr.indexOf(input.charAt(i++));\n                enc4 = _keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 != 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 != 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n\n            }\n\n            output = _utf8_decode(output);\n\n            return output;\n        }\n    }\n\n    angular.module('ngGitHubTools').service('$ghBase64Service', [ghBase64ServiceClass]);\n\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/ghBase64Service.js","/**\n * Service for working with GitHub repository branches API\n */\n\n(() => {\n    let _req;\n\n    class ghBranchesServiceClass {\n        constructor($ghRequestService) {\n            _req = $ghRequestService;\n        }\n\n        /**\n         * Get list of repository branches\n         *\n         * https://developer.github.com/v3/repos/branches/#list-branches\n         *\n         * @param ownerName {String} - username (login) of the repo owner\n         * @param repositoryName {String} - name of the repository\n         * @returns $q\n         */\n        getBranches(ownerName, repositoryName) {\n            return _req.getAsPossible(`repos/${ownerName}/${repositoryName}/branches`);\n        }\n\n        /**\n         * Get branch information\n         *\n         * https://developer.github.com/v3/repos/branches/#get-branch\n         *\n         * @param ownerName {String} - username (login) of the repo owner\n         * @param repositoryName {String} - name of the repository\n         * @param branchName {String} - name of the branch\n         * @returns $q\n         */\n        getBranch(ownerName, repositoryName, branchName) {\n            return _req.getAsPossible(`repos/${ownerName}/${repositoryName}/branches/${branchName}`);\n        }\n    }\n\n    angular.module('ngGitHubTools')\n        .service('$ghBranchesService', ['$ghRequestService', ghBranchesServiceClass]);\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/ghBranches.js","/**\n * Service for working with GitHub contents\n */\n\n(() => {\n    let _req;\n\n    class ghContentsServiceClass {\n        constructor($ghRequestService) {\n            _req = $ghRequestService;\n            this.username = '';\n            this.repositoryName = '';\n        }\n\n        setRepository(username, repositoryName) {\n            this.username = username;\n            this.repositoryName = repositoryName;\n            return this;\n        }\n\n        getBasePath() {\n            return `repos/${this.username}/${this.repositoryName}`;\n        }\n\n        getReadme() {\n            return _req.getAsPossible(`${this.getBasePath()}/readme`);\n        }\n\n        getContents(path, ref) {\n            return _req.getAsPossible(`${this.getBasePath()}/contents/${path}`, (ref) ? { ref } : {});\n        }\n\n        createFile(path, message, content, committer, author, branch) {\n            const params = {\n                message,\n                content\n            };\n\n            if (committer) params.committer = committer;\n            if (author) params.author = author;\n            if (branch) params.branch = branch;\n\n            return _req.put(`${this.getBasePath()}/contents/${path}`, params);\n        }\n\n        updateFile(path, message, content, sha, committer, author, branch) {\n            const params = {\n                message,\n                content,\n                sha\n            };\n\n            if (committer) params.committer = committer;\n            if (author) params.author = author;\n            if (branch) params.branch = branch;\n\n            return _req.put(`${this.getBasePath()}/contents/${path}`, params);\n        }\n\n        deleteFile(path, message, content, sha, committer, author, branch) {\n            const params = {\n                message,\n                content,\n                sha\n            };\n\n            if (committer) params.committer = committer;\n            if (author) params.author = author;\n            if (branch) params.branch = branch;\n\n            return _req.delete(`${this.getBasePath()}/contents/${path}`, params);\n        }\n\n        getArchiveLink(archive_format, ref) {\n            return _req.getAsPossible(`${this.getBasePath()}/${archive_format || 'tarball'}/${ref}`);\n        }\n    }\n\n    angular.module('ngGitHubTools').service('$ghContentsService', ['$ghRequestService', ghContentsServiceClass]);\n\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/ghContents.js","/**\n * Service for working with GitHub repositories API\n */\n\n(() => {\n    let _req;\n\n    class ghRepositoriesServiceClass {\n        constructor($ghRequestService) {\n            _req = $ghRequestService;\n        }\n\n        /**\n         * List repositories that are accessible to the authenticated user.\n         *\n         * This includes repositories owned by the authenticated user,\n         * repositories where the authenticated user is a collaborator,\n         * and repositories that the authenticated user has access to\n         * through an organization membership.\n         *\n         * https://developer.github.com/v3/repos/#list-your-repositories\n         *\n         * @returns $q\n         */\n        getCurrentUserRepos() {\n            return _req.getAsPossible('user/repos');\n        }\n\n        /**\n         * List public repositories for the specified user.\n         *\n         * https://developer.github.com/v3/repos/#list-user-repositories\n         *\n         * @param username {String} - username (login) of the user\n         *\n         * @returns $q\n         */\n        getUserRepos(username) {\n            return _req.getAsPossible(`users/${username}/repos`);\n        }\n\n        /**\n         * List repositories for the specified org.\n         *\n         * https://developer.github.com/v3/repos/#list-organization-repositories\n         *\n         * @param orgName {String} - organization name\n         *\n         * @returns $q\n         */\n        getOrganizationRepos(orgName) {\n            return _req.getAsPossible(`orgs/${orgName}/repos`);\n        }\n\n        /**\n         * This provides a dump of every public repository, in the order that they were created.\n         *\n         * Note: Pagination is powered exclusively by the since parameter.\n         * Use the Link header (https://developer.github.com/v3/#link-header)\n         * to get the URL for the next page of repositories.\n         *\n         * https://developer.github.com/v3/repos/#list-all-public-repositories\n         *\n         * @returns $q\n         */\n        getAllPublicRepos() {\n            return _req.getAsPossible('repositories');\n        }\n\n        /**\n         * Create a new repository for the authenticated user.\n         *\n         * https://developer.github.com/v3/repos/#create\n         *\n         * @param repositoryData {Object} - repository data\n         * @param repositoryData.name {String} - Required. The name of the repository\n         * @param repositoryData.description {String} - A short description of the repository\n         * @param repositoryData.homepage {String} - A URL with more information about the repository\n         * @param repositoryData.private {boolean} - Either true to create a private repository, or false to create a public one. Creating private repositories requires a paid GitHub account. Default: false\n         * @param repositoryData.has_issues {boolean} - Either true to enable issues for this repository, false to disable them. Default: true\n         * @param repositoryData.has_wiki {boolean} - Either true to enable the wiki for this repository, false to disable it. Default: true\n         * @param repositoryData.has_downloads {boolean} - Either true to enable downloads for this repository, false to disable them. Default: true\n         * @param repositoryData.team_id {Number} - The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.\n         * @param repositoryData.auto_init {boolean} - Pass true to create an initial commit with empty README. Default: false\n         * @param repositoryData.gitignore_template {String} - Desired language or platform .gitignore template (https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".\n         * @param repositoryData.license_template {String} - Desired LICENSE template (https://github.com/github/choosealicense.com) to apply. Use the name of the template (https://github.com/github/choosealicense.com/tree/gh-pages/_licenses) without the extension. For example, \"mit\" or \"mozilla\".\n         *\n         * @returns $q\n         */\n        createUserRepository(repositoryData) {\n            return _req.sendAuthorized('POST', 'user/repos', repositoryData);\n        }\n\n        /**\n         * Create a new repository in this organization.\n         * The authenticated user must be a member of the specified organization.\n         *\n         * https://developer.github.com/v3/repos/#create\n         *\n         * @param organizationName {String} - the name of organization where you plan to create repo\n         * @param repositoryData {Object} - repository data, format is the same as in createUserRepository() method\n         *\n         * @returns $q\n         */\n        createOrgRepository(organizationName, repositoryData) {\n            return _req.sendAuthorized('POST', `orgs/${organizationName}/repos`, repositoryData);\n        }\n\n        /**\n         * Get repository by its owner and name\n         *\n         * https://developer.github.com/v3/repos/#get\n         *\n         * @param ownerName {String} - username (login) of repo owner\n         * @param repositoryName {String} - repository name\n         * @returns $q\n         */\n        getRepository(ownerName, repositoryName) {\n            return _req.getAsPossible(`repos/${ownerName}/${repositoryName}`);\n        }\n\n        /**\n         * Edit a repository\n         *\n         * @param ownerName {String} - username (login) of repo owner\n         * @param repositoryName {String} - repository name\n         * @param repositoryData {Object} - new repository data\n         * @param repositoryData.name {String} - Required. The name of the repository\n         * @param repositoryData.description {String} - A short description of the repository\n         * @param repositoryData.homepage {String} - A URL with more information about the repository\n         * @param repositoryData.private {boolean} - Either true to make the repository private, or false to make it public. Creating private repositories requires a paid GitHub account. Default: false\n         * @param repositoryData.has_issues {boolean} - Either true to enable issues for this repository, false to disable them. Default: true\n         * @param repositoryData.has_wiki {boolean} - Either true to enable the wiki for this repository, false to disable it. Default: true\n         * @param repositoryData.has_downloads {boolean} - Either true to enable downloads for this repository, false to disable them. Default: true\n         * @param repositoryData.default_branch {String} - Updates the default branch for this repository.\n         *\n         * @returns {*}\n         */\n        editRepository(ownerName, repositoryName, repositoryData) {\n            return _req.sendAuthorized('PATCH', `repos/${ownerName}/${repositoryName}`, repositoryData);\n        }\n\n        /**\n         * List contributors to the specified repository,\n         * sorted by the number of commits per contributor in descending order.\n         *\n         * Contributors data is cached for performance reasons.\n         * This endpoint may return information that is a few hours old.\n         * Git contributors are identified by author email address. This API attempts to group contribution counts\n         * by GitHub user, across all of their associated email addresses. For performance reasons,\n         * only the first 500 author email addresses in the repository will be linked to GitHub users.\n         * The rest will appear as anonymous contributors without associated GitHub user information.\n         *\n         * https://developer.github.com/v3/repos/#list-contributors\n         *\n         * @param ownerName {String} - username (login) of repo owner\n         * @param repositoryName - {String} repository name\n         * @returns $q\n         */\n        getRepoContributors(ownerName, repositoryName) {\n            return _req.getAsPossible(`repos/${ownerName}/${repositoryName}/contributors`);\n        }\n\n        /**\n         * List languages for the specified repository.\n         * The value on the right of a language is the number of bytes of code written in that language.\n         *\n         * https://developer.github.com/v3/repos/#list-languages\n         *\n         * @param ownerName {String} - username (login) of repo owner\n         * @param repositoryName - {String} repository name\n         * @returns $q\n         */\n        getRepoLanguages(ownerName, repositoryName) {\n            return _req.getAsPossible(`repos/${ownerName}/${repositoryName}/languages`);\n        }\n\n        /**\n         * Get teams of repository\n         *\n         * https://developer.github.com/v3/repos/#list-teams\n         *\n         * @param ownerName {String} - username (login) of repo owner\n         * @param repositoryName - {String} repository name\n         * @returns $q\n         */\n        getRepoTeams(ownerName, repositoryName) {\n            return _req.getAsPossible(`repos/${ownerName}/${repositoryName}/teams`);\n        }\n\n        /**\n         * Get available tags for repository\n         *\n         * https://developer.github.com/v3/repos/#list-tags\n         *\n         * @param ownerName {String} - username (login) of repo owner\n         * @param repositoryName - {String} repository name\n         * @returns $q\n         */\n        getRepoTags(ownerName, repositoryName) {\n            return _req.getAsPossible(`repos/${ownerName}/${repositoryName}/tags`);\n        }\n\n        /**\n         * Deleting a repository requires admin access. If OAuth is used, the delete_repo scope is required.\n         *\n         * https://developer.github.com/v3/repos/#delete-a-repository\n         *\n         * @param ownerName {String} - username (login) of repo owner\n         * @param repositoryName - {String} repository name\n         * @returns $q\n         */\n        deleteRepository(ownerName, repositoryName) {\n            return _req.sendAuthorized('DELETE', `repos/${ownerName}/${repositoryName}`);\n        }\n    }\n\n    angular.module('ngGitHubTools')\n        .service('$ghRepositoriesService', ['$ghRequestService', ghRepositoriesServiceClass]);\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/ghRepositories.js","/**\n * Helping service for sending requests to GitHub API server\n *\n * If you plan to send your custom requests instantly without using existing methods\n * of any other service from this module, then preferred to use methods of this service instead.\n * That helps to avoid a lot of dependencies and many unnecessary code duplication\n */\n\n(() => {\n\n    let _api;\n    let _http;\n    let _auth;\n    let _getFullUrl;\n\n    class ghRequestServiceClass {\n        constructor($http, $ghApiHost, $ghAuthService) {\n            _api = $ghApiHost;\n            _http = $http;\n            _auth = $ghAuthService;\n\n            _getFullUrl = (url) => _api + url;\n        }\n\n        send(method, url, data) {\n            url = _getFullUrl(url);\n\n            return _http({\n                url,\n                method,\n                data\n            });\n        }\n\n        sendAuthorized(method, url, data) {\n            return _auth.sendAuthorizedRequest(method, url, data);\n        }\n\n        sendAsPossible(method, url, data) {\n            // check if we logged in\n            if (_auth.isLoggedIn()) {\n                // then we send authorized method to keep GitHub rate limits high\n                return _auth.sendAuthorizedRequest(method, url, data);\n            } else {\n                url = _getFullUrl(url);\n\n                // else send standard request without credentials\n                return _http({\n                    method,\n                    url,\n                    data\n                });\n            }\n        }\n\n        get(url, data) {\n            return _http({\n                method: 'GET',\n                url,\n                data\n            });\n        }\n\n        getAuthorized(url, data) {\n            return this.sendAuthorized('GET', url, data);\n        }\n\n        getAsPossible(url, data) {\n            return this.sendAsPossible('GET', url, data);\n        }\n\n        put(url, data) {\n            return this.sendAuthorized('PUT', url, data);\n        }\n\n        delete(url, data) {\n            return this.sendAuthorized('DELETE', url, data);\n        }\n    }\n\n    angular.module('ngGitHubTools').service('$ghRequestService', ['$http', '$ghApiHost', '$ghAuthService', ghRequestServiceClass]);\n\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/ghRequest.js","/**\n * Service for working with GitHub users API\n */\n\n(() => {\n\n    let _req;\n\n    class ghUsersServiceClass {\n        constructor($ghRequestService) {\n            _req = $ghRequestService;\n        }\n\n        getUserByUsername(username) {\n            return _req.getAsPossible('users/' + username);\n        }\n\n        getCurrentUser() {\n            return _req.getAsPossible('user');\n        }\n\n        getAllUsers(since) {\n            return _req.getAsPossible('users', { since });\n        }\n    }\n\n    angular.module('ngGitHubTools').service('$ghUsersService', ['$ghRequestService', ghUsersServiceClass]);\n\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/ghUsers.js","// Main module file\nimport './module';\n\n// Services\nimport './services/ghBase64Service';\nimport './services/ghRequest';\nimport './services/ghAuth';\nimport './services/ghUsers';\nimport './services/ghRepositories';\nimport './services/ghBranches';\nimport './services/ghContents';\n\n\n\n// WEBPACK FOOTER //\n// ./src/ng-github-tools.js"],"sourceRoot":""}